#!/bin/bash


width=$(tput cols)

function printseparator {
  echo
  printf '%*s\n' "$width" '' | tr ' ' '='
  echo
}

DB_PATH="$1"
DB_NAME=$(basename "$DB_PATH")  # or: DB_NAME="${DB_PATH##*/}"

# 'basename' gives you the last part of a file path â€” the actual file name.
# DB_PATH##*/ = "the longest match (last match of '/') of anything followed by a slash, from the start">>>if DB_PATH#*/ = the shortest match (first match of '/')

if [[ ! -d "$DB_PATH" ]]
then
  echo "Database path '$DB_PATH' not found!"
  exit 1
fi

try=""

function listTables 
{
  echo "Tables Available:"
  if [[ $(ls -A $DB_PATH) ]];
    then
    	ls -1 $DB_PATH
    else
     	echo "No Tables created"
     	echo
    	read -p "Press Enter to return to menu....."
    	
  fi
}
function selectWholeTable
{
  echo "+----+-------+-----+ " | column -t
  sed -E 's/ *\| */ /g; s/:([^| ]*)//g' $meta_file | column -t 
  echo "+----+-------+-----+ " | column -t
  sed 's/|/ /g' $table_file | column -t
}

function selectFields
{
	
  declare -A fields
  declare -i i=1
  while read -r key
  do
    fields["$key"]=$i
    ((++i))
  done < <(sed -E 's/\|/\n/g' $meta_file | awk -F: '{print $1}' )
  
  for key in "${!fields[@]}"
  do
    echo "${fields[$key]} ) $key  "	
  done

  selected_fields=()
  while read -p "Enter fields you want displayed. Press Enter when finished: " -ra input
  do
    [[ -z $input ]] && break
    if [[ $input -lt $i && $input -ge 1 ]]
    then
      selected_fields+=($input)
    else
      echo "Invalid Entry. Please enter a valid number from 1 to $i"
    fi

  done

  echo "+----+-------+-----+ " | column -t
  awk -F' ' -v fi_head="${selected_fields[*]}" 'BEGIN{split(fi_head,arr,/\s/);}
  NR==1 
  {
    for (head in arr)
    {
      printf "%s \t", $arr[head]
    }
    #print "\n"
  }' < <(sed -E 's/\|/\n/g' $meta_file | awk -F: '{print $1}' | column)
  echo " "
  echo "+----+-------+-----+ " | column -t

  awk -F'|' -v fi="${selected_fields[*]}"  'BEGIN{split(fi,arr,/\s/);}
  {

    for (data in arr)
    {
      printf "%s \t", $arr[data]
    }
    print "\n"
  }' "$table_file"


}

function selectRows
{
	echo "Enter the range of rows you want to select: "
	read -p "Enter starting row: " row_start
	read -p "Enter ending row: " row_end
	
	echo "+----+-------+-----+ " | column -t
	sed -E 's/ *\| */ /g; s/:([^| ]*)//g' $meta_file | column -t 
	echo "+----+-------+-----+ " | column -t
	
	head -$row_end $table_file | tail -$(($row_end-$row_start+1)) | sed 's/|/ /g' | column -t --output-separator '|'

}

function selectFromTable
{
  clear
  printseparator
  printf "%*s%s\n" $((width / 2)) " Insert Into Tables of DB: $DB_NAME"
  printseparator

  listTables
  
  
  read -p "Enter table name to select from: " table_name
  table_file="$DB_PATH/$table_name"
  meta_file="$DB_PATH/.$table_name.meta"
  
  if [[ ! -f "$table_file" || ! -f "$meta_file" ]]
  then
    echo "Table '$table_name' does not exist."
    return
  fi
  clear
  printseparator
  printf "%*s%s\n" $((width / 2)) " The Main Menu of DB: $DB_NAME"
  printseparator
  
  echo "1. Select Whole table"
  echo "2. Select field/s from table"
  echo "3. Select row/s from table"
  echo "4. Select with condition"
  printseparator
  read -p "Enter your select choice [1-4]: " select_choice
  
  case $select_choice in
  1) selectWholeTable;;
  2) selectFields;;
  3) selectRows;;
  *) echo "Invalid Option";;
  esac
}

function dropTable
{
  clear
  printseparator
  printf "%*s%s\n" $((width / 2)) " Dropping Table in DB: $DB_NAME"
  printseparator
  
  listTables
  
  read -p "Enter table name to drop: " table_name
  table_file="$DB_PATH/$table_name"
  meta_file="$DB_PATH/.$table_name.meta"
  
  if [[ ! -f "$table_file" || ! -f "$meta_file" ]]
  then
	echo "Table does not exist!"
  else
  	rm $table_file $meta_file
  	echo "$table_name is dropped!"
  fi
}

function deleteRows
{
	echo "Enter the range of rows you want to delete: "
	read -p "Enter starting row: " row_start
	read -p "Enter ending row: " row_end
	
	sed -i "$row_start","$row_end"d $table_file;
	echo "Rows from $row_start to $row_end are now deleted !"
	

}

function deleteFromTable {
clear
  printseparator
  printf "%*s%s\n" $((width / 2)) " Delete From Tables of DB: $DB_NAME"
  printseparator
  
  listTables
  
  read -p "Enter table name to delete from: " table_name
  table_file="$DB_PATH/$table_name"
  meta_file="$DB_PATH/.$table_name.meta"
  
  if [[ ! -f "$table_file" || ! -f "$meta_file" ]]
  then
    echo "Table '$table_name' does not exist."
    return
  fi
  clear
  printseparator
  printf "%*s%s\n" $((width / 2)) " The Main Menu of DB: $DB_NAME"
  printseparator
  
  echo "1. Select row/s from table"
  echo "2. Nothing else"
  printseparator
  read -p "Enter your delete choice [1-4]: " delete_choice
  
  case $delete_choice in
  1) deleteRows ;;
  *) echo "Invalid Option";;
  esac

}

while true
do
  clear
  printseparator
  printf "%*s%s\n" $((width / 2)) " The Main Menu of DB: $DB_NAME"
  printseparator
  echo "1. Create Table"
  echo "2. List Tables"
  echo "3. Drop Table"
  echo "4. Insert into Table"
  echo "5. Select From Table"
  echo "6. Delete From Table"
  echo "7. Update Table"
  echo "8. Back to Main Menu"

  read -p "Enter your choice [1-8]: " choice

  case $choice in
    1) createTable ;;
    2) #echo "Tables in $DB_NAME:" && ls -1 "$DB_PATH" 
       listTables;;
    3) dropTable ;;
    4) insertIntoTable ;;
    5) selectFromTable ;;
    6) deleteFromTable ;;
    7) updateTable ;;
    8) ./menu;;
    *) echo "Invalid choice. Try again." ;;
  esac

  read -p "Press Enter to continue..." continue
done
